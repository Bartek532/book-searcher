generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id              Int               @id @default(autoincrement())
  name            String
  author          String
  img             String
  slug            String
  room            String
  place           String
  description     String
  series          String
  /// The value of this field is generated by the database as: `(now())::timestamp without time zone`.
  createdAt       DateTime          @default(dbgenerated("(now())::timestamp without time zone")) @db.Timestamp(6)
  /// The value of this field is generated by the database as: `(now())::timestamp without time zone`.
  updatedAt       DateTime          @default(dbgenerated("(now())::timestamp without time zone")) @db.Timestamp(6)
  BookTag         BookTag[]
  UserBookLibrary UserBookLibrary[]
  UserBookRate    UserBookRate[]
}

model BookTag {
  bookId  Int
  tagName String
  Book    Book   @relation(fields: [bookId], references: [id])
  Tag     Tag    @relation(fields: [tagName], references: [name])

  @@id([bookId, tagName])
}

model Tag {
  name    String    @id
  BookTag BookTag[]
}

model User {
  id              Int               @id @default(autoincrement())
  name            String
  email           String
  password        String
  isActive        Boolean?          @default(false)
  isAdmin         Boolean?          @default(false)
  /// The value of this field is generated by the database as: `(now())::timestamp without time zone`.
  createdAt       DateTime          @default(dbgenerated("(now())::timestamp without time zone")) @db.Timestamp(6)
  /// The value of this field is generated by the database as: `(now())::timestamp without time zone`.
  updatedAt       DateTime          @default(dbgenerated("(now())::timestamp without time zone")) @db.Timestamp(6)
  UserBookLibrary UserBookLibrary[]
  UserBookRate    UserBookRate[]
  UserToken       UserToken[]
}

model UserBookLibrary {
  bookId Int
  userId Int
  Book   Book @relation(fields: [bookId], references: [id])
  User   User @relation(fields: [userId], references: [id])

  @@id([bookId, userId])
}

model UserBookRate {
  bookId Int
  userId Int
  rate   Int
  Book   Book @relation(fields: [bookId], references: [id])
  User   User @relation(fields: [userId], references: [id])

  @@id([bookId, userId])
}

model UserToken {
  userId Int
  token  String @db.VarChar(255)
  User   User   @relation(fields: [userId], references: [id])

  @@id([userId, token])
}
